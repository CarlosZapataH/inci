/* eslint-disable no-restricted-globals */

// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.

import { cacheNames, clients, clientsClaim } from 'workbox-core';
import { ExpirationPlugin } from 'workbox-expiration';
import { createHandlerBoundToURL, precacheAndRoute } from 'workbox-precaching';
import { registerRoute, NavigationRoute } from 'workbox-routing';
import { StaleWhileRevalidate, CacheFirst, NetworkFirst } from 'workbox-strategies';
import { CacheableResponse, CacheableResponsePlugin } from 'workbox-cacheable-response';

clientsClaim();

/**
 * We are not wrapping it in a 'message' event as per the new update.
 * @see https://developers.google.com/web/tools/workbox/modules/workbox-core
 */
self.skipWaiting();

/**
 * Precache all of the assets generated by your build process.
 * Their URLs are injected into the manifest variable below.
 * This variable must be present somewhere in your service worker file,
 * even if you decide not to use precaching. See https://cra.link/PWA
 */
precacheAndRoute(self.__WB_MANIFEST);

// registerRoute(
//   new RegExp('^https://.+?/guest/personal\\?userId=\\d+$'),
//   new NetworkFirst({
//     cacheName: 'guest-personal',
//     plugins: [
//       new StaleWhileRevalidate({
//         cacheName: 'guest-personal',
//         maxEntries: 50, // Puedes ajustar este valor según tus necesidades
//       }),
//     ],
//   })
// );

// self.addEventListener('fetch', (event) => {
// 	const url = new URL(event.request.url);

// 	// Verifica si la solicitud es para una URL bajo /guest/personal con el parámetro userId
// 	if (url.pathname.startsWith('/guest/personal') && url.searchParams.has('userId')) {
// 		// Clona la solicitud para consumirla y responder con ella
// 		const clonedRequest = event.request.clone();

// 		// Responde a la solicitud desde la red y almacena en caché la respuesta
// 		event.respondWith(
// 			fetch(clonedRequest)
// 				.then((response) => {
// 					// Verifica que la respuesta sea válida y tiene un código de estado 200
// 					if (!response || response.status !== 200) {
// 						return response;
// 					}

// 					// Clona la respuesta para consumirla y almacenarla en caché
// 					const clonedResponse = response.clone();

// 					// Abre la caché con el nombre deseado
// 					caches.open(cacheNames.runtime).then((cache) => {
// 						// Almacena en caché la respuesta usando la URL completa como clave
// 						cache.put(event.request, clonedResponse);
// 					});

// 					return response;
// 				})
// 				.catch(() => {
// 					// Si la solicitud falla, intenta responder desde la caché
// 					return caches.match(event.request);
// 				})
// 		);
// 	}
// });

// registerRoute(
// 	new RegExp('^https://.+?/guest/personal\\?userId=\\d+$'),
// 	new NetworkFirst({
// 		cacheName: 'guest-personal',
// 		plugins: [
// 			new StaleWhileRevalidate({
// 				cacheName: 'guest-personal',
// 				maxEntries: 50, // Puedes ajustar este valor según tus necesidades
// 			}),
// 		],
// 	})
// );

// registerRoute(
//   new RegExp('^https://.+?/guest/personal\\?userId=\\d+$'),
//   new StaleWhileRevalidate({
//     cacheName: 'guest-personal',
//     plugins: [
//       {
//         cacheWillUpdate: async ({ request, response }) => {
//           // Abre la caché y almacena en caché la respuesta para cada combinación de userId
//           const cache = await caches.open('guest-personal');
//           cache.put(request, response.clone());
//           return response;
//         },
//       },
//     ],
//   })
// );

// registerRoute(
// 	new RegExp('^https://.+?/guest/personal\\?userId=\\d+$'),
// 	new CacheFirst({
// 		cacheName: 'guest-personal',
// 		plugins: [
// 			{
// 				cacheWillUpdate: async ({ request, response }) => {
// 					// Almacenar en caché todas las combinaciones de userId automáticamente
// 					const cache = await caches.open('guest-personal');
// 					cache.put(request, response.clone());
// 					return response;
// 				},
// 			},
// 		],
// 	})
// );

// registerRoute(
// 	new RegExp('^https://.+?/guest/personal\\?userId=\\d+$'),
// 	new NetworkFirst({
// 		cacheName: 'guest-personal',
// 		plugins: [
// 			{
// 				cacheWillUpdate: async ({ request, response }) => {
// 					// Almacenar en caché todas las combinaciones de userId automáticamente
// 					const cache = await caches.open('guest-personal');
// 					cache.put(request, response.clone());
// 					return response;
// 				},
// 			},
// 		],
// 	})
// );

const handler = createHandlerBoundToURL('/index.html');
const navigationRoute = new NavigationRoute(handler);
registerRoute(navigationRoute);

// registerRoute(
// 	new RegExp('^https://.+?/guest/personal\\?userId=\\d+$'),
// 	new CacheFirst({
// 		cacheName: 'guest-personal',
// 		plugins: [
// 			new CacheableResponse({
// 				statuses: [200], // Solo almacenamos en caché respuestas con estado 200 (OK).
// 			}),
// 		],
// 	})
// );

// Cache the Google Fonts stylesheets with a stale-while-revalidate strategy.
// @see https://developers.google.com/web/tools/workbox/guides/common-recipes#google_fonts
registerRoute(
	({ url }) => url.origin === 'https://fonts.googleapis.com',
	new StaleWhileRevalidate({
		cacheName: 'google-fonts-stylesheets',
	})
);

// Cache the underlying font files with a cache-first strategy for 1 year.
// @see https://developers.google.com/web/tools/workbox/guides/common-recipes#google_fonts
registerRoute(
	({ url }) => url.origin === 'https://fonts.gstatic.com',
	new CacheFirst({
		cacheName: 'google-fonts-webfonts',
		plugins: [
			new CacheableResponsePlugin({
				statuses: [0, 200],
			}),
			new ExpirationPlugin({
				maxAgeSeconds: 60 * 60 * 24 * 365,
				maxEntries: 30,
			}),
		],
	})
);

// /**
//  * Move api.
//  *
//  * Caches at: runtime
//  */
// registerRoute(
// 	({ url }) =>
// 		url.origin === 'https://api.themoviedb.org' &&
// 		url.pathname.startsWith('/3/discover/tv'),
// 	new StaleWhileRevalidate({
// 		cacheName: 'movie-api-response',
// 		plugins: [
// 			new CacheableResponsePlugin({
// 				statuses: [0, 200],
// 			}),
// 			new ExpirationPlugin({ maxEntries: 1 }), // Will cache maximum 1 requests.
// 		],
// 	})
// );

registerRoute(
	({ url }) =>
		url.origin === 'https://hombrenuevo-api.smartrix.pe/api/v1/siscap/users' &&
		url.method === 'GET',
	new NetworkFirst({
		cacheName: 'siscap-api-users',
		plugins: [
			new CacheableResponsePlugin({
				statuses: [0, 200],
			}),
			new ExpirationPlugin({ maxEntries: 2 }), // Will cache maximum 1 requests.
		],
	})
);

// registerRoute(
// 	({ url }) =>
// 		url.origin === 'https://hombrenuevo-api.smartrix.pe/api/v1/siscap/users' &&
// 		url.pathname.startsWith('/api/v1/siscap/users'),
// 	new StaleWhileRevalidate({
// 		cacheName: 'confipetrol-api-response',
// 		plugins: [
// 			new CacheableResponsePlugin({
// 				statuses: [0, 200],
// 			}),
// 			new ExpirationPlugin({ maxEntries: 2 }), // Will cache maximum 1 requests.
// 		],
// 	})
// );

/**
 * We use CacheFirst for images because, images are not going to change very often,
 * so it does not make sense to revalidate images on every request.
 *
 * @see https://developers.google.com/web/tools/workbox/guides/common-recipes#caching_images
 */
registerRoute(
	({ request }) => request.destination === 'image',
	new CacheFirst({
		cacheName: 'images',
		plugins: [
			new CacheableResponsePlugin({
				statuses: [0, 200],
			}),
			new ExpirationPlugin({
				maxEntries: 60,
				maxAgeSeconds: 30 * 24 * 60 * 60, // 30 Days
			}),
		],
	})
);

// @see https://developers.google.com/web/tools/workbox/guides/common-recipes#cache_css_and_javascript_files
registerRoute(
	({ request }) => request.destination === 'script' || request.destination === 'style',
	new StaleWhileRevalidate({
		cacheName: 'static-resources',
	})
);

registerRoute(
	({ request }) => request.method === 'GET',
	// Estrategia de cacheo: Cache First
	new NetworkFirst()
);
